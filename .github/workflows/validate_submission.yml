name: Validate and Add Project Submission

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate:
    name: Validate Submission
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.parse.outputs.validated }}
      project_name: ${{ steps.parse.outputs.project_name }}
      project_url: ${{ steps.parse.outputs.project_url }}
      project_desc: ${{ steps.parse.outputs.project_desc }}
      project_level: ${{ steps.parse.outputs.project_level }}
    steps:
      - name: Check Issue Title
        id: check_title
        run: |
          if [[ "${{ github.event.issue.title }}" != *"[Project Submission]"* ]]; then
            echo "Not a project submission."
            echo "validated=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Parse and Validate Required Fields
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = context.payload.issue.body || "";

            function getField(field) {
              // Tries both "Field: value" and "Field:\nvalue"
              let regex = new RegExp(`\\*\\*${field}:\\*\\*\\s*(.*)`, "i");
              let match = body.match(regex);
              if (match && match[1].trim()) return match[1].trim();

              regex = new RegExp(`\\*\\*${field}:\\*\\*\\s*\\n\\s*(.*)`, "i");
              match = body.match(regex);
              if (match && match[1].trim()) return match[1].trim();

              return "";
            }

            const requiredFields = [
              "Project Name",
              "Repository URL",
              "Short Description",
              "Contribution Level",
              "Areas of Contribution"
            ];

            let missing = [];
            let results = {};
            for (const field of requiredFields) {
              const value = getField(field);
              results[field] = value;
              if (!value) missing.push(field);
            }

            if (missing.length > 0) {
              const msg = `⚠️ Thank you for your submission! Missing required fields:\n\n${missing.map(f => `- **${f}:**`).join("\n")}\n\nPlease edit your issue to include them.`;
              await github.rest.issues.createComment({
                ...context.issue,
                body: msg
              });
              await github.rest.issues.addLabels({
                ...context.issue,
                labels: ["needs-info"]
              });
              core.setOutput("validated", "false");
            } else {
              await github.rest.issues.addLabels({
                ...context.issue,
                labels: ["valid-submission"]
              });
              core.setOutput("validated", "true");
              core.setOutput("project_name", results["Project Name"]);
              core.setOutput("project_url", results["Repository URL"]);
              core.setOutput("project_desc", results["Short Description"]);
              core.setOutput("project_level", results["Contribution Level"]);
            }

  create-pr:
    name: Create Project PR
    needs: validate
    if: needs.validate.outputs.validated == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare Project Entry
        id: entry
        run: |
          NAME="${{ needs.validate.outputs.project_name }}"
          URL="${{ needs.validate.outputs.project_url }}"
          DESC="${{ needs.validate.outputs.project_desc }}"
          LEVEL=$(echo "${{ needs.validate.outputs.project_level }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$LEVEL" == *professional* ]]; then
            FILE="PROJECTS/PROFESSIONAL_PROJECTS.md"
          else
            FILE="PROJECTS/BEGINNER_PROJECTS.md"
          fi
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "- [$NAME]($URL) - $DESC" > new_entry.txt

      - name: Append Project to List
        run: |
          cat new_entry.txt >> "${{ steps.entry.outputs.file }}"

      - name: Create PR Body
        run: |
          cat > pr_body.txt << EOF
          This PR was created automatically from [issue #${{ github.event.issue.number }}](${{ github.event.issue.html_url }}).

          **Project Details**
          - **Name:** ${{ needs.validate.outputs.project_name }}
          - **Level:** ${{ needs.validate.outputs.project_level }}
          - **Repository:** ${{ needs.validate.outputs.project_url }}
          - **Description:** ${{ needs.validate.outputs.project_desc }}
          EOF

      - name: Commit and Open Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Add project: ${{ needs.validate.outputs.project_name }}"
          branch: "add-project-${{ github.event.issue.number }}"
          title: "Add project: ${{ needs.validate.outputs.project_name }}"
          body-path: pr_body.txt
